# coding: utf-8

"""
    Blockstore API

    REST API for Open edX Blockstore  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineObject1(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uuid': 'str',
        'url': 'str',
        'entity': 'ApiV1IndexBlocksEntity',
        'summary': 'ApiV1IndexBlocksSummary',
        'ownership': 'ApiV1IndexBlocksOwnership',
        'authorship': 'ApiV1IndexBlocksAuthorship',
        'tags': 'ApiV1IndexBlocksTags',
        'analytics': 'ApiV1IndexBlocksAnalytics'
    }

    attribute_map = {
        'uuid': 'uuid',
        'url': 'url',
        'entity': 'entity',
        'summary': 'summary',
        'ownership': 'ownership',
        'authorship': 'authorship',
        'tags': 'tags',
        'analytics': 'analytics'
    }

    def __init__(self, uuid=None, url=None, entity=None, summary=None, ownership=None, authorship=None, tags=None, analytics=None):  # noqa: E501
        """InlineObject1 - a model defined in OpenAPI"""  # noqa: E501

        self._uuid = None
        self._url = None
        self._entity = None
        self._summary = None
        self._ownership = None
        self._authorship = None
        self._tags = None
        self._analytics = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if url is not None:
            self.url = url
        if entity is not None:
            self.entity = entity
        if summary is not None:
            self.summary = summary
        if ownership is not None:
            self.ownership = ownership
        if authorship is not None:
            self.authorship = authorship
        if tags is not None:
            self.tags = tags
        if analytics is not None:
            self.analytics = analytics

    @property
    def uuid(self):
        """Gets the uuid of this InlineObject1.  # noqa: E501


        :return: The uuid of this InlineObject1.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this InlineObject1.


        :param uuid: The uuid of this InlineObject1.  # noqa: E501
        :type: str
        """
        if uuid is not None and len(uuid) < 1:
            raise ValueError("Invalid value for `uuid`, length must be greater than or equal to `1`")  # noqa: E501

        self._uuid = uuid

    @property
    def url(self):
        """Gets the url of this InlineObject1.  # noqa: E501


        :return: The url of this InlineObject1.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InlineObject1.


        :param url: The url of this InlineObject1.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def entity(self):
        """Gets the entity of this InlineObject1.  # noqa: E501


        :return: The entity of this InlineObject1.  # noqa: E501
        :rtype: ApiV1IndexBlocksEntity
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this InlineObject1.


        :param entity: The entity of this InlineObject1.  # noqa: E501
        :type: ApiV1IndexBlocksEntity
        """

        self._entity = entity

    @property
    def summary(self):
        """Gets the summary of this InlineObject1.  # noqa: E501


        :return: The summary of this InlineObject1.  # noqa: E501
        :rtype: ApiV1IndexBlocksSummary
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this InlineObject1.


        :param summary: The summary of this InlineObject1.  # noqa: E501
        :type: ApiV1IndexBlocksSummary
        """

        self._summary = summary

    @property
    def ownership(self):
        """Gets the ownership of this InlineObject1.  # noqa: E501


        :return: The ownership of this InlineObject1.  # noqa: E501
        :rtype: ApiV1IndexBlocksOwnership
        """
        return self._ownership

    @ownership.setter
    def ownership(self, ownership):
        """Sets the ownership of this InlineObject1.


        :param ownership: The ownership of this InlineObject1.  # noqa: E501
        :type: ApiV1IndexBlocksOwnership
        """

        self._ownership = ownership

    @property
    def authorship(self):
        """Gets the authorship of this InlineObject1.  # noqa: E501


        :return: The authorship of this InlineObject1.  # noqa: E501
        :rtype: ApiV1IndexBlocksAuthorship
        """
        return self._authorship

    @authorship.setter
    def authorship(self, authorship):
        """Sets the authorship of this InlineObject1.


        :param authorship: The authorship of this InlineObject1.  # noqa: E501
        :type: ApiV1IndexBlocksAuthorship
        """

        self._authorship = authorship

    @property
    def tags(self):
        """Gets the tags of this InlineObject1.  # noqa: E501


        :return: The tags of this InlineObject1.  # noqa: E501
        :rtype: ApiV1IndexBlocksTags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this InlineObject1.


        :param tags: The tags of this InlineObject1.  # noqa: E501
        :type: ApiV1IndexBlocksTags
        """

        self._tags = tags

    @property
    def analytics(self):
        """Gets the analytics of this InlineObject1.  # noqa: E501


        :return: The analytics of this InlineObject1.  # noqa: E501
        :rtype: ApiV1IndexBlocksAnalytics
        """
        return self._analytics

    @analytics.setter
    def analytics(self, analytics):
        """Sets the analytics of this InlineObject1.


        :param analytics: The analytics of this InlineObject1.  # noqa: E501
        :type: ApiV1IndexBlocksAnalytics
        """

        self._analytics = analytics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
