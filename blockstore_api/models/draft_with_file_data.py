# coding: utf-8

"""
    Blockstore API

    REST API for Open edX Blockstore  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DraftWithFileData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uuid': 'str',
        'url': 'str',
        'bundle': 'str',
        'bundle_uuid': 'str',
        'name': 'str',
        'staged_draft': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'url': 'url',
        'bundle': 'bundle',
        'bundle_uuid': 'bundle_uuid',
        'name': 'name',
        'staged_draft': 'staged_draft'
    }

    def __init__(self, uuid=None, url=None, bundle=None, bundle_uuid=None, name=None, staged_draft=None):  # noqa: E501
        """DraftWithFileData - a model defined in OpenAPI"""  # noqa: E501

        self._uuid = None
        self._url = None
        self._bundle = None
        self._bundle_uuid = None
        self._name = None
        self._staged_draft = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if url is not None:
            self.url = url
        if bundle is not None:
            self.bundle = bundle
        self.bundle_uuid = bundle_uuid
        self.name = name
        self.staged_draft = staged_draft

    @property
    def uuid(self):
        """Gets the uuid of this DraftWithFileData.  # noqa: E501


        :return: The uuid of this DraftWithFileData.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DraftWithFileData.


        :param uuid: The uuid of this DraftWithFileData.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def url(self):
        """Gets the url of this DraftWithFileData.  # noqa: E501


        :return: The url of this DraftWithFileData.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DraftWithFileData.


        :param url: The url of this DraftWithFileData.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def bundle(self):
        """Gets the bundle of this DraftWithFileData.  # noqa: E501


        :return: The bundle of this DraftWithFileData.  # noqa: E501
        :rtype: str
        """
        return self._bundle

    @bundle.setter
    def bundle(self, bundle):
        """Sets the bundle of this DraftWithFileData.


        :param bundle: The bundle of this DraftWithFileData.  # noqa: E501
        :type: str
        """

        self._bundle = bundle

    @property
    def bundle_uuid(self):
        """Gets the bundle_uuid of this DraftWithFileData.  # noqa: E501


        :return: The bundle_uuid of this DraftWithFileData.  # noqa: E501
        :rtype: str
        """
        return self._bundle_uuid

    @bundle_uuid.setter
    def bundle_uuid(self, bundle_uuid):
        """Sets the bundle_uuid of this DraftWithFileData.


        :param bundle_uuid: The bundle_uuid of this DraftWithFileData.  # noqa: E501
        :type: str
        """
        if bundle_uuid is None:
            raise ValueError("Invalid value for `bundle_uuid`, must not be `None`")  # noqa: E501

        self._bundle_uuid = bundle_uuid

    @property
    def name(self):
        """Gets the name of this DraftWithFileData.  # noqa: E501


        :return: The name of this DraftWithFileData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DraftWithFileData.


        :param name: The name of this DraftWithFileData.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 180:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `180`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def staged_draft(self):
        """Gets the staged_draft of this DraftWithFileData.  # noqa: E501


        :return: The staged_draft of this DraftWithFileData.  # noqa: E501
        :rtype: str
        """
        return self._staged_draft

    @staged_draft.setter
    def staged_draft(self, staged_draft):
        """Sets the staged_draft of this DraftWithFileData.


        :param staged_draft: The staged_draft of this DraftWithFileData.  # noqa: E501
        :type: str
        """
        if staged_draft is None:
            raise ValueError("Invalid value for `staged_draft`, must not be `None`")  # noqa: E501

        self._staged_draft = staged_draft

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DraftWithFileData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
