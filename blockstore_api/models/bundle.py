# coding: utf-8

"""
    Blockstore API

    REST API for Open edX Blockstore  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Bundle(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'collection': 'str',
        'collection_uuid': 'str',
        'description': 'str',
        'drafts': 'str',
        'slug': 'str',
        'title': 'str',
        'url': 'str',
        'uuid': 'str',
        'versions': 'list[str]'
    }

    attribute_map = {
        'collection': 'collection',
        'collection_uuid': 'collection_uuid',
        'description': 'description',
        'drafts': 'drafts',
        'slug': 'slug',
        'title': 'title',
        'url': 'url',
        'uuid': 'uuid',
        'versions': 'versions'
    }

    def __init__(self, collection=None, collection_uuid=None, description=None, drafts=None, slug=None, title=None, url=None, uuid=None, versions=None):  # noqa: E501
        """Bundle - a model defined in OpenAPI"""  # noqa: E501

        self._collection = None
        self._collection_uuid = None
        self._description = None
        self._drafts = None
        self._slug = None
        self._title = None
        self._url = None
        self._uuid = None
        self._versions = None
        self.discriminator = None

        if collection is not None:
            self.collection = collection
        self.collection_uuid = collection_uuid
        self.description = description
        if drafts is not None:
            self.drafts = drafts
        self.slug = slug
        self.title = title
        if url is not None:
            self.url = url
        if uuid is not None:
            self.uuid = uuid
        if versions is not None:
            self.versions = versions

    @property
    def collection(self):
        """Gets the collection of this Bundle.  # noqa: E501


        :return: The collection of this Bundle.  # noqa: E501
        :rtype: str
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this Bundle.


        :param collection: The collection of this Bundle.  # noqa: E501
        :type: str
        """

        self._collection = collection

    @property
    def collection_uuid(self):
        """Gets the collection_uuid of this Bundle.  # noqa: E501


        :return: The collection_uuid of this Bundle.  # noqa: E501
        :rtype: str
        """
        return self._collection_uuid

    @collection_uuid.setter
    def collection_uuid(self, collection_uuid):
        """Sets the collection_uuid of this Bundle.


        :param collection_uuid: The collection_uuid of this Bundle.  # noqa: E501
        :type: str
        """
        if collection_uuid is None:
            raise ValueError("Invalid value for `collection_uuid`, must not be `None`")  # noqa: E501

        self._collection_uuid = collection_uuid

    @property
    def description(self):
        """Gets the description of this Bundle.  # noqa: E501


        :return: The description of this Bundle.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Bundle.


        :param description: The description of this Bundle.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501
        if description is not None and len(description) > 10000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `10000`")  # noqa: E501
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def drafts(self):
        """Gets the drafts of this Bundle.  # noqa: E501


        :return: The drafts of this Bundle.  # noqa: E501
        :rtype: str
        """
        return self._drafts

    @drafts.setter
    def drafts(self, drafts):
        """Sets the drafts of this Bundle.


        :param drafts: The drafts of this Bundle.  # noqa: E501
        :type: str
        """

        self._drafts = drafts

    @property
    def slug(self):
        """Gets the slug of this Bundle.  # noqa: E501


        :return: The slug of this Bundle.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Bundle.


        :param slug: The slug of this Bundle.  # noqa: E501
        :type: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501
        if slug is not None and len(slug) > 50:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `50`")  # noqa: E501
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")  # noqa: E501

        self._slug = slug

    @property
    def title(self):
        """Gets the title of this Bundle.  # noqa: E501


        :return: The title of this Bundle.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Bundle.


        :param title: The title of this Bundle.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if title is not None and len(title) > 180:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `180`")  # noqa: E501
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def url(self):
        """Gets the url of this Bundle.  # noqa: E501


        :return: The url of this Bundle.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Bundle.


        :param url: The url of this Bundle.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def uuid(self):
        """Gets the uuid of this Bundle.  # noqa: E501


        :return: The uuid of this Bundle.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Bundle.


        :param uuid: The uuid of this Bundle.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def versions(self):
        """Gets the versions of this Bundle.  # noqa: E501


        :return: The versions of this Bundle.  # noqa: E501
        :rtype: list[str]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this Bundle.


        :param versions: The versions of this Bundle.  # noqa: E501
        :type: list[str]
        """

        self._versions = versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Bundle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
