# coding: utf-8

"""
    Blockstore API

    REST API for Open edX Blockstore  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ApiV1IndexBlocksAnalytics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'favorites': 'int',
        'remixes': 'int',
        'views': 'int'
    }

    attribute_map = {
        'favorites': 'favorites',
        'remixes': 'remixes',
        'views': 'views'
    }

    def __init__(self, favorites=None, remixes=None, views=None):  # noqa: E501
        """ApiV1IndexBlocksAnalytics - a model defined in OpenAPI"""  # noqa: E501

        self._favorites = None
        self._remixes = None
        self._views = None
        self.discriminator = None

        self.favorites = favorites
        self.remixes = remixes
        self.views = views

    @property
    def favorites(self):
        """Gets the favorites of this ApiV1IndexBlocksAnalytics.  # noqa: E501


        :return: The favorites of this ApiV1IndexBlocksAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._favorites

    @favorites.setter
    def favorites(self, favorites):
        """Sets the favorites of this ApiV1IndexBlocksAnalytics.


        :param favorites: The favorites of this ApiV1IndexBlocksAnalytics.  # noqa: E501
        :type: int
        """

        self._favorites = favorites

    @property
    def remixes(self):
        """Gets the remixes of this ApiV1IndexBlocksAnalytics.  # noqa: E501


        :return: The remixes of this ApiV1IndexBlocksAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._remixes

    @remixes.setter
    def remixes(self, remixes):
        """Sets the remixes of this ApiV1IndexBlocksAnalytics.


        :param remixes: The remixes of this ApiV1IndexBlocksAnalytics.  # noqa: E501
        :type: int
        """

        self._remixes = remixes

    @property
    def views(self):
        """Gets the views of this ApiV1IndexBlocksAnalytics.  # noqa: E501


        :return: The views of this ApiV1IndexBlocksAnalytics.  # noqa: E501
        :rtype: int
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this ApiV1IndexBlocksAnalytics.


        :param views: The views of this ApiV1IndexBlocksAnalytics.  # noqa: E501
        :type: int
        """

        self._views = views

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiV1IndexBlocksAnalytics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
