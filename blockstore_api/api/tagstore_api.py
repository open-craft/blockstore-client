# coding: utf-8

"""
    Blockstore API

    REST API for Open edX Blockstore  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from blockstore_api.api_client import ApiClient
from blockstore_api.exceptions import (
    ApiTypeError,
    ApiValueError
)


class TagstoreApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_tag_to_entity(self, entity_type, external_id, name, taxonomy_id, **kwargs):  # noqa: E501
        """add_tag_to_entity  # noqa: E501

        Add the given tag to the entity. The entity will be auto-created if it isn't yet tracked (persisted) in Tagstore's database.  Only raises an error if the tag does not exist.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_tag_to_entity(entity_type, external_id, name, taxonomy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_type: (required)
        :param str external_id: (required)
        :param str name: (required)
        :param str taxonomy_id: (required)
        :return: Tag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_tag_to_entity_with_http_info(entity_type, external_id, name, taxonomy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_tag_to_entity_with_http_info(entity_type, external_id, name, taxonomy_id, **kwargs)  # noqa: E501
            return data

    def add_tag_to_entity_with_http_info(self, entity_type, external_id, name, taxonomy_id, **kwargs):  # noqa: E501
        """add_tag_to_entity  # noqa: E501

        Add the given tag to the entity. The entity will be auto-created if it isn't yet tracked (persisted) in Tagstore's database.  Only raises an error if the tag does not exist.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_tag_to_entity_with_http_info(entity_type, external_id, name, taxonomy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_type: (required)
        :param str external_id: (required)
        :param str name: (required)
        :param str taxonomy_id: (required)
        :return: Tag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['entity_type', 'external_id', 'name', 'taxonomy_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_tag_to_entity" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in local_var_params or
                local_var_params['entity_type'] is None):
            raise ApiValueError("Missing the required parameter `entity_type` when calling `add_tag_to_entity`")  # noqa: E501
        # verify the required parameter 'external_id' is set
        if ('external_id' not in local_var_params or
                local_var_params['external_id'] is None):
            raise ApiValueError("Missing the required parameter `external_id` when calling `add_tag_to_entity`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in local_var_params or
                local_var_params['name'] is None):
            raise ApiValueError("Missing the required parameter `name` when calling `add_tag_to_entity`")  # noqa: E501
        # verify the required parameter 'taxonomy_id' is set
        if ('taxonomy_id' not in local_var_params or
                local_var_params['taxonomy_id'] is None):
            raise ApiValueError("Missing the required parameter `taxonomy_id` when calling `add_tag_to_entity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity_type' in local_var_params:
            path_params['entity_type'] = local_var_params['entity_type']  # noqa: E501
        if 'external_id' in local_var_params:
            path_params['external_id'] = local_var_params['external_id']  # noqa: E501
        if 'name' in local_var_params:
            path_params['name'] = local_var_params['name']  # noqa: E501
        if 'taxonomy_id' in local_var_params:
            path_params['taxonomy_id'] = local_var_params['taxonomy_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tagstore/api/v1/entities/{entity_type}/{external_id}/tags/{taxonomy_id}/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_taxonomy_tag(self, id, data, **kwargs):  # noqa: E501
        """add_taxonomy_tag  # noqa: E501

        Add a tag to the taxonomy, if it doesn't already exist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_taxonomy_tag(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this taxonomy. (required)
        :param Tag data: (required)
        :return: Tag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_taxonomy_tag_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.add_taxonomy_tag_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def add_taxonomy_tag_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """add_taxonomy_tag  # noqa: E501

        Add a tag to the taxonomy, if it doesn't already exist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_taxonomy_tag_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this taxonomy. (required)
        :param Tag data: (required)
        :return: Tag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_taxonomy_tag" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `add_taxonomy_tag`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in local_var_params or
                local_var_params['data'] is None):
            raise ApiValueError("Missing the required parameter `data` when calling `add_taxonomy_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tagstore/api/v1/taxonomies/{id}/tags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_taxonomy(self, data, **kwargs):  # noqa: E501
        """create_taxonomy  # noqa: E501

        Create a new Taxonomy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_taxonomy(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Taxonomy data: (required)
        :return: Taxonomy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_taxonomy_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_taxonomy_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def create_taxonomy_with_http_info(self, data, **kwargs):  # noqa: E501
        """create_taxonomy  # noqa: E501

        Create a new Taxonomy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_taxonomy_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Taxonomy data: (required)
        :return: Taxonomy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_taxonomy" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in local_var_params or
                local_var_params['data'] is None):
            raise ApiValueError("Missing the required parameter `data` when calling `create_taxonomy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tagstore/api/v1/taxonomies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Taxonomy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_taxonomy(self, id, **kwargs):  # noqa: E501
        """delete_taxonomy  # noqa: E501

        Delete a specific taxonomy and all of its tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_taxonomy(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this taxonomy. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_taxonomy_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_taxonomy_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_taxonomy_with_http_info(self, id, **kwargs):  # noqa: E501
        """delete_taxonomy  # noqa: E501

        Delete a specific taxonomy and all of its tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_taxonomy_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this taxonomy. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_taxonomy" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `delete_taxonomy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tagstore/api/v1/taxonomies/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_taxonomy_tag(self, id, name, **kwargs):  # noqa: E501
        """delete_taxonomy_tag  # noqa: E501

        Delete a tag  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_taxonomy_tag(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this taxonomy. (required)
        :param str name: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_taxonomy_tag_with_http_info(id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_taxonomy_tag_with_http_info(id, name, **kwargs)  # noqa: E501
            return data

    def delete_taxonomy_tag_with_http_info(self, id, name, **kwargs):  # noqa: E501
        """delete_taxonomy_tag  # noqa: E501

        Delete a tag  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_taxonomy_tag_with_http_info(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this taxonomy. (required)
        :param str name: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_taxonomy_tag" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `delete_taxonomy_tag`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in local_var_params or
                local_var_params['name'] is None):
            raise ApiValueError("Missing the required parameter `name` when calling `delete_taxonomy_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'name' in local_var_params:
            path_params['name'] = local_var_params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tagstore/api/v1/taxonomies/{id}/tags/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def entity_has_tag(self, entity_type, external_id, name, taxonomy_id, **kwargs):  # noqa: E501
        """entity_has_tag  # noqa: E501

        Does this entity have the given tag? Use this if you need to check if an entity has one specific tag, as it will be faster than loading the entity's entire tag list. Raises 404 if the tag does not exist.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entity_has_tag(entity_type, external_id, name, taxonomy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_type: (required)
        :param str external_id: (required)
        :param str name: (required)
        :param str taxonomy_id: (required)
        :return: Tag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.entity_has_tag_with_http_info(entity_type, external_id, name, taxonomy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.entity_has_tag_with_http_info(entity_type, external_id, name, taxonomy_id, **kwargs)  # noqa: E501
            return data

    def entity_has_tag_with_http_info(self, entity_type, external_id, name, taxonomy_id, **kwargs):  # noqa: E501
        """entity_has_tag  # noqa: E501

        Does this entity have the given tag? Use this if you need to check if an entity has one specific tag, as it will be faster than loading the entity's entire tag list. Raises 404 if the tag does not exist.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entity_has_tag_with_http_info(entity_type, external_id, name, taxonomy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_type: (required)
        :param str external_id: (required)
        :param str name: (required)
        :param str taxonomy_id: (required)
        :return: Tag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['entity_type', 'external_id', 'name', 'taxonomy_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entity_has_tag" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in local_var_params or
                local_var_params['entity_type'] is None):
            raise ApiValueError("Missing the required parameter `entity_type` when calling `entity_has_tag`")  # noqa: E501
        # verify the required parameter 'external_id' is set
        if ('external_id' not in local_var_params or
                local_var_params['external_id'] is None):
            raise ApiValueError("Missing the required parameter `external_id` when calling `entity_has_tag`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in local_var_params or
                local_var_params['name'] is None):
            raise ApiValueError("Missing the required parameter `name` when calling `entity_has_tag`")  # noqa: E501
        # verify the required parameter 'taxonomy_id' is set
        if ('taxonomy_id' not in local_var_params or
                local_var_params['taxonomy_id'] is None):
            raise ApiValueError("Missing the required parameter `taxonomy_id` when calling `entity_has_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity_type' in local_var_params:
            path_params['entity_type'] = local_var_params['entity_type']  # noqa: E501
        if 'external_id' in local_var_params:
            path_params['external_id'] = local_var_params['external_id']  # noqa: E501
        if 'name' in local_var_params:
            path_params['name'] = local_var_params['name']  # noqa: E501
        if 'taxonomy_id' in local_var_params:
            path_params['taxonomy_id'] = local_var_params['taxonomy_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tagstore/api/v1/entities/{entity_type}/{external_id}/tags/{taxonomy_id}/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_entity(self, entity_type, external_id, **kwargs):  # noqa: E501
        """get_entity  # noqa: E501

        Get a single entity. Never raises a 404, because Tagstore doesn't know which entities exist or not. If you want to know whether or not the entity is persisted in Tagstore's database, check the resulting \"persisted\" boolean field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_entity(entity_type, external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_type: (required)
        :param str external_id: (required)
        :return: EntityDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_entity_with_http_info(entity_type, external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_entity_with_http_info(entity_type, external_id, **kwargs)  # noqa: E501
            return data

    def get_entity_with_http_info(self, entity_type, external_id, **kwargs):  # noqa: E501
        """get_entity  # noqa: E501

        Get a single entity. Never raises a 404, because Tagstore doesn't know which entities exist or not. If you want to know whether or not the entity is persisted in Tagstore's database, check the resulting \"persisted\" boolean field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_entity_with_http_info(entity_type, external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_type: (required)
        :param str external_id: (required)
        :return: EntityDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['entity_type', 'external_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_entity" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in local_var_params or
                local_var_params['entity_type'] is None):
            raise ApiValueError("Missing the required parameter `entity_type` when calling `get_entity`")  # noqa: E501
        # verify the required parameter 'external_id' is set
        if ('external_id' not in local_var_params or
                local_var_params['external_id'] is None):
            raise ApiValueError("Missing the required parameter `external_id` when calling `get_entity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity_type' in local_var_params:
            path_params['entity_type'] = local_var_params['entity_type']  # noqa: E501
        if 'external_id' in local_var_params:
            path_params['external_id'] = local_var_params['external_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tagstore/api/v1/entities/{entity_type}/{external_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_taxonomies(self, **kwargs):  # noqa: E501
        """get_taxonomies  # noqa: E501

        Get a list of all taxonomies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_taxonomies(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_taxonomies_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_taxonomies_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_taxonomies_with_http_info(self, **kwargs):  # noqa: E501
        """get_taxonomies  # noqa: E501

        Get a list of all taxonomies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_taxonomies_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_taxonomies" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'page_size' in local_var_params:
            query_params.append(('page_size', local_var_params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tagstore/api/v1/taxonomies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_taxonomy(self, id, **kwargs):  # noqa: E501
        """get_taxonomy  # noqa: E501

        Get a specific taxonomy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_taxonomy(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this taxonomy. (required)
        :return: Taxonomy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_taxonomy_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_taxonomy_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_taxonomy_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_taxonomy  # noqa: E501

        Get a specific taxonomy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_taxonomy_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this taxonomy. (required)
        :return: Taxonomy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_taxonomy" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `get_taxonomy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tagstore/api/v1/taxonomies/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Taxonomy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_taxonomy_tag(self, id, name, **kwargs):  # noqa: E501
        """get_taxonomy_tag  # noqa: E501

        Get a specific tag in the taxonomy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_taxonomy_tag(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this taxonomy. (required)
        :param str name: (required)
        :return: Tag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_taxonomy_tag_with_http_info(id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_taxonomy_tag_with_http_info(id, name, **kwargs)  # noqa: E501
            return data

    def get_taxonomy_tag_with_http_info(self, id, name, **kwargs):  # noqa: E501
        """get_taxonomy_tag  # noqa: E501

        Get a specific tag in the taxonomy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_taxonomy_tag_with_http_info(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this taxonomy. (required)
        :param str name: (required)
        :return: Tag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_taxonomy_tag" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `get_taxonomy_tag`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in local_var_params or
                local_var_params['name'] is None):
            raise ApiValueError("Missing the required parameter `name` when calling `get_taxonomy_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'name' in local_var_params:
            path_params['name'] = local_var_params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tagstore/api/v1/taxonomies/{id}/tags/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_taxonomy_tags(self, id, **kwargs):  # noqa: E501
        """List the tags in this taxonomy.  # noqa: E501

        It guarantees that parent tags will be returned before their children.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_taxonomy_tags(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this taxonomy. (required)
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_taxonomy_tags_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_taxonomy_tags_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_taxonomy_tags_with_http_info(self, id, **kwargs):  # noqa: E501
        """List the tags in this taxonomy.  # noqa: E501

        It guarantees that parent tags will be returned before their children.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_taxonomy_tags_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this taxonomy. (required)
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_taxonomy_tags" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `get_taxonomy_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'page_size' in local_var_params:
            query_params.append(('page_size', local_var_params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tagstore/api/v1/taxonomies/{id}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_tag_from_entity(self, entity_type, external_id, name, taxonomy_id, **kwargs):  # noqa: E501
        """Remove the given tag from the entity.  # noqa: E501

        Only raises an error if the tag does not exist.  We do not provide an option to auto-delete the tag from the taxonomy if it's not applied to any other entities, because tags can also be removed from entities when entities are deleted, and we want consistent behavior in both cases.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_tag_from_entity(entity_type, external_id, name, taxonomy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_type: (required)
        :param str external_id: (required)
        :param str name: (required)
        :param str taxonomy_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_tag_from_entity_with_http_info(entity_type, external_id, name, taxonomy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_tag_from_entity_with_http_info(entity_type, external_id, name, taxonomy_id, **kwargs)  # noqa: E501
            return data

    def remove_tag_from_entity_with_http_info(self, entity_type, external_id, name, taxonomy_id, **kwargs):  # noqa: E501
        """Remove the given tag from the entity.  # noqa: E501

        Only raises an error if the tag does not exist.  We do not provide an option to auto-delete the tag from the taxonomy if it's not applied to any other entities, because tags can also be removed from entities when entities are deleted, and we want consistent behavior in both cases.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_tag_from_entity_with_http_info(entity_type, external_id, name, taxonomy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_type: (required)
        :param str external_id: (required)
        :param str name: (required)
        :param str taxonomy_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['entity_type', 'external_id', 'name', 'taxonomy_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_tag_from_entity" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in local_var_params or
                local_var_params['entity_type'] is None):
            raise ApiValueError("Missing the required parameter `entity_type` when calling `remove_tag_from_entity`")  # noqa: E501
        # verify the required parameter 'external_id' is set
        if ('external_id' not in local_var_params or
                local_var_params['external_id'] is None):
            raise ApiValueError("Missing the required parameter `external_id` when calling `remove_tag_from_entity`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in local_var_params or
                local_var_params['name'] is None):
            raise ApiValueError("Missing the required parameter `name` when calling `remove_tag_from_entity`")  # noqa: E501
        # verify the required parameter 'taxonomy_id' is set
        if ('taxonomy_id' not in local_var_params or
                local_var_params['taxonomy_id'] is None):
            raise ApiValueError("Missing the required parameter `taxonomy_id` when calling `remove_tag_from_entity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity_type' in local_var_params:
            path_params['entity_type'] = local_var_params['entity_type']  # noqa: E501
        if 'external_id' in local_var_params:
            path_params['external_id'] = local_var_params['external_id']  # noqa: E501
        if 'name' in local_var_params:
            path_params['name'] = local_var_params['name']  # noqa: E501
        if 'taxonomy_id' in local_var_params:
            path_params['taxonomy_id'] = local_var_params['taxonomy_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tagstore/api/v1/entities/{entity_type}/{external_id}/tags/{taxonomy_id}/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
